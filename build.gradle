plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'application'
    id 'jacoco'
}

mainClassName = 'br.com.dev.shoppingcart.AppKt'
group = 'br.com.dev'
version = '1.2.0'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

dependencies {
    implementation 'io.javalin:javalin:3.13.4'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.2'
    implementation 'org.koin:koin-core:2.2.2'

    testImplementation 'io.rest-assured:rest-assured:4.3.3'
    testImplementation 'io.rest-assured:kotlin-extensions:4.3.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'io.mockk:mockk:1.10.6'
    testCompile 'org.assertj:assertj-core:3.11.1'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': mainClassName
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        excludeFiles(classDirectories)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                enabled = true
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }

    afterEvaluate {
        excludeFiles(classDirectories)
    }
}

private excludeFiles(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: ['br/com/dev/shoppingcart/config/**',
                                    'br/com/dev/shoppingcart/App**',
                                    'br/com/dev/shoppingcart/domain/repository/**'])
    }))
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
}